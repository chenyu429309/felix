开放关闭原则：
    设计原则：类应该对扩展开放，对修改关闭。

装饰模式可以在不改变一个对象本身功能的基础上给对象增加额外的新行为。
装饰模式是一种用于替代继承的技术，它通过一种无须定义子类的方式来给对象动态增加职责，
使用对象之间的关联关系取代类之间的继承关系。
在装饰模式中引入了装饰类，在装饰类中既可以调用待装饰的原有类的方法，
还可以增加新的方法，以扩充原有类的功能
    package yanbober.github.io;

    //Component（抽象构件）
    interface ProgramMonkey {
        void skills();
    }
    //ConcreteComponent（具体构件）
    class AndroidProgramMonkey implements ProgramMonkey {
        @Override
        public void skills() {
            System.out.println("会写Android代码！");
        }
    }
    //ConcreteComponent（具体构件）
    class PHPProgramMonkey implements ProgramMonkey {
        @Override
        public void skills() {
            System.out.println("会写PHP代码！");
        }
    }
    //Decorator（抽象装饰类）
    class ProgramMonkeyDecorator implements ProgramMonkey {
        protected ProgramMonkey mProgramMonkey;

        public ProgramMonkeyDecorator(ProgramMonkey mProgramMonkey) {
            this.mProgramMonkey = mProgramMonkey;
        }

        public void skills() {
            mProgramMonkey.skills();
        }
    }
    //ConcreteDecorator（具体装饰类）
    class PatternDecorator extends ProgramMonkeyDecorator {
        public PatternDecorator(ProgramMonkey mProgramMonkey) {
            super(mProgramMonkey);
        }

        @Override
        public void skills() {
            super.skills();
            System.out.println("会设计模式！");
        }
    }

    public class Main {
        public static void main(String[] args) {
            //有一个Android程序猿只会写Android代码
            ProgramMonkey programMonkey = new AndroidProgramMonkey();
            programMonkey.skills();
            //装饰一下他，装逼的技能，他竟然除了写Android还懂设计模式
            programMonkey = new PatternDecorator(programMonkey);
            programMonkey.skills();

            programMonkey = new PHPProgramMonkey();
            programMonkey.skills();
        }
    }